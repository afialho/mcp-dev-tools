#!/usr/bin/env node

const htmlUtils = require('../tools/html-utils');

async function demonstrarHtmlUtils() {
  console.log('üé® DEMONSTRA√á√ÉO HTML UTILS - MCP DEV TOOLS\n');
  console.log('=' .repeat(60));

  const htmlExemplo = `
    <!DOCTYPE html>
    <html lang="pt-BR">
      <head>
        <title>P√°gina de Exemplo</title>
        <meta name="description" content="Uma p√°gina de exemplo para demonstra√ß√£o">
      </head>
      <body>
        <header>
          <h1>T√≠tulo Principal</h1>
          <nav>
            <ul>
              <li><a href="#home">Home</a></li>
              <li><a href="#sobre">Sobre</a></li>
            </ul>
          </nav>
        </header>
        <main>
          <section>
            <h2>Se√ß√£o Principal</h2>
            <p>Este √© um par√°grafo com <strong>texto em negrito</strong> e <em>texto em it√°lico</em>.</p>
            <img src="exemplo.jpg" alt="Imagem de exemplo">
            <div class="card card">
              <p></p>
            </div>
          </section>
        </main>
        <footer>
          <p>&copy; 2024 Exemplo</p>
        </footer>
      </body>
    </html>
  `;

  const htmlPerigoso = '<p>Texto seguro</p><script>alert("XSS")</script><div onclick="malicious()">Clique aqui</div>';

  try {
    console.log('\nüìù 1. FORMATA√á√ÉO HTML');
    console.log('-'.repeat(30));
    const formatResult = await htmlUtils.execute({
      operacao: 'formatar',
      html_string: '<div><p>HTML n√£o formatado</p><span>Texto</span></div>',
      indentacao: 2
    });
    console.log(formatResult.content[0].text);

    console.log('\nüóúÔ∏è 2. MINIFICA√á√ÉO HTML');
    console.log('-'.repeat(30));
    const minifyResult = await htmlUtils.execute({
      operacao: 'minificar',
      html_string: htmlExemplo,
      preservar_comentarios: false
    });
    console.log(minifyResult.content[0].text);

    console.log('\n‚úÖ 3. VALIDA√á√ÉO HTML');
    console.log('-'.repeat(30));
    const validateResult = await htmlUtils.execute({
      operacao: 'validar',
      html_string: '<div><p>Par√°grafo n√£o fechado<span>Span</span></div>'
    });
    console.log(validateResult.content[0].text);

    console.log('\nüîÑ 4. CONVERS√ÉO HTML ‚Üí MARKDOWN');
    console.log('-'.repeat(30));
    const convertResult = await htmlUtils.execute({
      operacao: 'converter',
      html_string: '<h1>T√≠tulo</h1><p>Par√°grafo com <strong>negrito</strong> e <em>it√°lico</em>.</p><ul><li>Item 1</li><li>Item 2</li></ul>',
      formato_destino: 'markdown'
    });
    console.log(convertResult.content[0].text);

    console.log('\nüìä 5. CONVERS√ÉO HTML ‚Üí JSON');
    console.log('-'.repeat(30));
    const jsonResult = await htmlUtils.execute({
      operacao: 'converter',
      html_string: '<html><head><title>Teste</title></head><body><h1>T√≠tulo</h1><p>Texto</p></body></html>',
      formato_destino: 'json'
    });
    console.log(jsonResult.content[0].text);

    console.log('\nüîí 6. ESCAPE DE CARACTERES');
    console.log('-'.repeat(30));
    const escapeResult = await htmlUtils.execute({
      operacao: 'escapar',
      texto_para_escapar: '<script>alert("XSS")</script>'
    });
    console.log(escapeResult.content[0].text);

    console.log('\nüéØ 7. EXTRA√á√ÉO DE ELEMENTOS');
    console.log('-'.repeat(30));
    const extractResult = await htmlUtils.execute({
      operacao: 'extrair',
      html_string: htmlExemplo,
      seletor_css: 'a'
    });
    console.log(extractResult.content[0].text);

    console.log('\nüìä 8. AN√ÅLISE COMPLETA');
    console.log('-'.repeat(30));
    const analyzeResult = await htmlUtils.execute({
      operacao: 'analisar',
      html_string: htmlExemplo,
      incluir_estatisticas: true,
      incluir_seo: true,
      incluir_acessibilidade: true
    });
    console.log(analyzeResult.content[0].text);

    console.log('\nüßπ 9. SANITIZA√á√ÉO HTML');
    console.log('-'.repeat(30));
    const sanitizeResult = await htmlUtils.execute({
      operacao: 'sanitizar',
      html_string: htmlPerigoso,
      nivel_sanitizacao: 'basico'
    });
    console.log(sanitizeResult.content[0].text);

    console.log('\n‚ö° 10. OTIMIZA√á√ÉO HTML');
    console.log('-'.repeat(30));
    const optimizeResult = await htmlUtils.execute({
      operacao: 'otimizar',
      html_string: htmlExemplo
    });
    console.log(optimizeResult.content[0].text);

    console.log('\nüèóÔ∏è 11. GERA√á√ÉO DE TEMPLATES');
    console.log('-'.repeat(30));
    const templateResult = await htmlUtils.execute({
      operacao: 'gerar',
      template_tipo: 'formulario'
    });
    console.log(templateResult.content[0].text);

    console.log('\nüîç 12. COMPARA√á√ÉO DE HTMLs');
    console.log('-'.repeat(30));
    const compareResult = await htmlUtils.execute({
      operacao: 'comparar',
      html_string: '<div><p>Vers√£o 1</p></div>',
      html_comparacao: '<div><p>Vers√£o 1</p><p>Vers√£o 2</p></div>'
    });
    console.log(compareResult.content[0].text);

    console.log('\nüìã 13. GERA√á√ÉO DE SCHEMA');
    console.log('-'.repeat(30));
    const schemaResult = await htmlUtils.execute({
      operacao: 'gerar_schema',
      html_string: htmlExemplo
    });
    console.log(schemaResult.content[0].text);

    console.log('\n' + '='.repeat(60));
    console.log('üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('‚úÖ Todas as 13 funcionalidades da HTML Utils foram demonstradas');
    console.log('üöÄ Ferramenta pronta para uso em projetos MCP');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå Erro na demonstra√ß√£o:', error.message);
    console.error('Stack:', error.stack);
  }
}

if (require.main === module) {
  demonstrarHtmlUtils();
}

module.exports = { demonstrarHtmlUtils };
