const cpfUtils = require('../../tools/cpf-utils');
const { testTool, testToolError } = require('../helpers/test-utils');

async function testGerarCpfUnico() {
  console.log('üß™ Testando gera√ß√£o de CPF √∫nico...');
  
  await testTool(
    cpfUtils, 
    { operacao: 'gerar', quantidade: 1, formato: 'com_mascara' },
    ['CPFs Gerados', '1.', '‚úÖ V√°lido', 'gerado(s) com sucesso']
  );
  
  console.log('  ‚úÖ CPF √∫nico gerado com sucesso');
}

async function testGerarMultiplosCpfs() {
  console.log('üß™ Testando gera√ß√£o de m√∫ltiplos CPFs...');
  
  await testTool(
    cpfUtils,
    { operacao: 'gerar', quantidade: 3, formato: 'sem_mascara' },
    ['CPFs Gerados', '1.', '2.', '3.', '‚úÖ V√°lido', '3 CPF(s) gerado(s)']
  );
  
  console.log('  ‚úÖ M√∫ltiplos CPFs gerados com sucesso');
}

async function testValidarCpfsValidos() {
  console.log('üß™ Testando valida√ß√£o de CPFs v√°lidos...');
  
  // CPFs v√°lidos conhecidos
  const cpfsValidos = ['11144477735', '123.456.789-09'];
  
  await testTool(
    cpfUtils,
    { operacao: 'validar', cpfs: cpfsValidos },
    ['Valida√ß√£o de CPFs', '‚úÖ **V√°lido**', 'Resumo']
  );
  
  console.log('  ‚úÖ CPFs v√°lidos identificados corretamente');
}

async function testValidarCpfsInvalidos() {
  console.log('üß™ Testando valida√ß√£o de CPFs inv√°lidos...');
  
  const cpfsInvalidos = [
    '111.111.111-11', // Sequ√™ncia repetida
    '123.456.789-99', // D√≠gitos verificadores incorretos
    '12345678',       // Poucos d√≠gitos
    '123456789012'    // Muitos d√≠gitos
  ];
  
  await testTool(
    cpfUtils,
    { operacao: 'validar', cpfs: cpfsInvalidos },
    ['Valida√ß√£o de CPFs', '‚ùå **Inv√°lido**', 'Sequ√™ncia repetida', 'Resumo']
  );
  
  console.log('  ‚úÖ CPFs inv√°lidos identificados corretamente');
}

async function testValidarCpfsMistos() {
  console.log('üß™ Testando valida√ß√£o de CPFs mistos...');
  
  const cpfsMistos = [
    '11144477735',    // V√°lido
    '111.111.111-11', // Inv√°lido - sequ√™ncia
    '123.456.789-09'  // V√°lido
  ];
  
  await testTool(
    cpfUtils,
    { operacao: 'validar', cpfs: cpfsMistos },
    ['Valida√ß√£o de CPFs', '‚úÖ **V√°lido**', '‚ùå **Inv√°lido**', '2 v√°lido(s), 1 inv√°lido(s)']
  );
  
  console.log('  ‚úÖ CPFs mistos validados corretamente');
}

async function testFormatarAdicionarMascara() {
  console.log('üß™ Testando formata√ß√£o - adicionar m√°scara...');
  
  const cpfsSemMascara = ['11144477735', '12345678909'];
  
  await testTool(
    cpfUtils,
    { operacao: 'formatar', cpfs: cpfsSemMascara, formato: 'com_mascara' },
    ['Formata√ß√£o de CPFs', 'Adicionar m√°scara', '111.444.777-35', '123.456.789-09', '‚Üí']
  );
  
  console.log('  ‚úÖ M√°scaras adicionadas corretamente');
}

async function testFormatarRemoverMascara() {
  console.log('üß™ Testando formata√ß√£o - remover m√°scara...');
  
  const cpfsComMascara = ['111.444.777-35', '123.456.789-09'];
  
  await testTool(
    cpfUtils,
    { operacao: 'formatar', cpfs: cpfsComMascara, formato: 'sem_mascara' },
    ['Formata√ß√£o de CPFs', 'Remover m√°scara', '11144477735', '12345678909', '‚Üí']
  );
  
  console.log('  ‚úÖ M√°scaras removidas corretamente');
}

async function testFormatarCpfsJaFormatados() {
  console.log('üß™ Testando formata√ß√£o de CPFs j√° formatados...');
  
  const cpfsJaFormatados = ['111.444.777-35'];
  
  await testTool(
    cpfUtils,
    { operacao: 'formatar', cpfs: cpfsJaFormatados, formato: 'com_mascara' },
    ['Formata√ß√£o de CPFs', 'sem altera√ß√£o', 'processado(s) com sucesso']
  );
  
  console.log('  ‚úÖ CPFs j√° formatados tratados corretamente');
}

async function testValidarSemCpfs() {
  console.log('üß™ Testando valida√ß√£o sem fornecer CPFs...');
  
  await testTool(
    cpfUtils,
    { operacao: 'validar' },
    ['‚ùå', 'Erro de Valida√ß√£o', 'necess√°rio fornecer uma lista de CPFs']
  );
  
  console.log('  ‚úÖ Erro de valida√ß√£o sem CPFs tratado corretamente');
}

async function testFormatarSemCpfs() {
  console.log('üß™ Testando formata√ß√£o sem fornecer CPFs...');
  
  await testTool(
    cpfUtils,
    { operacao: 'formatar' },
    ['‚ùå', 'Erro de Formata√ß√£o', 'necess√°rio fornecer uma lista de CPFs']
  );
  
  console.log('  ‚úÖ Erro de formata√ß√£o sem CPFs tratado corretamente');
}

async function testOperacaoInvalida() {
  console.log('üß™ Testando opera√ß√£o inv√°lida...');
  
  await testTool(
    cpfUtils,
    { operacao: 'operacao_inexistente' },
    ['‚ùå', 'Opera√ß√£o Inv√°lida', 'gerar', 'validar', 'formatar']
  );
  
  console.log('  ‚úÖ Opera√ß√£o inv√°lida tratada corretamente');
}

async function testValidacaoAlgoritmo() {
  console.log('üß™ Testando algoritmo de valida√ß√£o espec√≠fico...');
  
  // Testa CPF v√°lido conhecido: 111.444.777-35
  const cpfValido = '11144477735';
  const resultado = cpfUtils.validarCPF(cpfValido);
  
  if (!resultado) {
    throw new Error('CPF v√°lido conhecido foi rejeitado pelo algoritmo');
  }
  
  // Testa CPF inv√°lido conhecido: 111.111.111-11
  const cpfInvalido = '11111111111';
  const resultadoInvalido = cpfUtils.validarCPF(cpfInvalido);
  
  if (resultadoInvalido) {
    throw new Error('CPF inv√°lido conhecido foi aceito pelo algoritmo');
  }
  
  console.log('  ‚úÖ Algoritmo de valida√ß√£o funcionando corretamente');
}

async function testGeracaoAlgoritmo() {
  console.log('üß™ Testando algoritmo de gera√ß√£o...');
  
  // Gera um CPF e valida se est√° correto
  const cpfGerado = cpfUtils.gerarCPF();
  
  if (cpfGerado.length !== 11) {
    throw new Error('CPF gerado n√£o tem 11 d√≠gitos');
  }
  
  if (!/^\d{11}$/.test(cpfGerado)) {
    throw new Error('CPF gerado cont√©m caracteres n√£o num√©ricos');
  }
  
  if (!cpfUtils.validarCPF(cpfGerado)) {
    throw new Error('CPF gerado n√£o passou na valida√ß√£o');
  }
  
  console.log('  ‚úÖ Algoritmo de gera√ß√£o funcionando corretamente');
}

async function testLimiteQuantidade() {
  console.log('üß™ Testando limite de quantidade (100 CPFs)...');
  
  await testTool(
    cpfUtils,
    { operacao: 'gerar', quantidade: 100, formato: 'sem_mascara' },
    ['CPFs Gerados', '100.', '100 CPF(s) gerado(s)']
  );
  
  console.log('  ‚úÖ Limite de 100 CPFs funcionando corretamente');
}

async function runCpfUtilsTests() {
  console.log('üöÄ Testando CPF Utils...\n');
  
  try {
    // Testes de gera√ß√£o
    await testGerarCpfUnico();
    await testGerarMultiplosCpfs();
    await testLimiteQuantidade();
    
    // Testes de valida√ß√£o
    await testValidarCpfsValidos();
    await testValidarCpfsInvalidos();
    await testValidarCpfsMistos();
    
    // Testes de formata√ß√£o
    await testFormatarAdicionarMascara();
    await testFormatarRemoverMascara();
    await testFormatarCpfsJaFormatados();
    
    // Testes de erro
    await testValidarSemCpfs();
    await testFormatarSemCpfs();
    await testOperacaoInvalida();
    
    // Testes de algoritmos
    await testValidacaoAlgoritmo();
    await testGeracaoAlgoritmo();
    
    console.log('\n‚úÖ CPF Utils - Todos os testes passaram!');
  } catch (error) {
    console.error('‚ùå CPF Utils - Teste falhou:', error.message);
    throw error;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runCpfUtilsTests().catch(console.error);
}

module.exports = { runCpfUtilsTests };
